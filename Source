local UIS = game:GetService("UserInputService")
local TS = game:GetService("TweenService")

local Library = {}

function Library:MakeWindow(WindowData)
	local Gui = Instance.new("ScreenGui", gethui and gethui() or game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"))
	Gui.Name = "MobileUILibrary"
	Gui.ResetOnSpawn = false
	Gui.IgnoreGuiInset = true

	local Main = Instance.new("Frame", Gui)
	Main.Size = WindowData.Size or UDim2.new(0.3, 0, 0.35, 0)
	Main.Position = UDim2.new(0.5, -Main.Size.X.Offset / 2, 0.5, -Main.Size.Y.Offset / 2)
	Main.AnchorPoint = Vector2.new(0.5, 0.5)
	Main.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	Main.BorderSizePixel = 0

	local TabsHolder = Instance.new("Frame", Main)
	TabsHolder.Size = UDim2.new(1, 0, 0, 30)
	TabsHolder.BackgroundTransparency = 1

	local TabButtons = Instance.new("ScrollingFrame", TabsHolder)
	TabButtons.BackgroundTransparency = 1
	TabButtons.Size = UDim2.new(1, 0, 1, 0)
	TabButtons.CanvasSize = UDim2.new()
	TabButtons.ScrollBarThickness = 2
	TabButtons.AutomaticCanvasSize = Enum.AutomaticSize.X
	TabButtons.ScrollingDirection = Enum.ScrollingDirection.X

	local TabLayout = Instance.new("UIListLayout", TabButtons)
	TabLayout.FillDirection = Enum.FillDirection.Horizontal
	TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
	TabLayout.Padding = UDim.new(0, 5)

	local Content = Instance.new("Frame", Main)
	Content.Size = UDim2.new(1, 0, 1, -30)
	Content.Position = UDim2.new(0, 0, 0, 30)
	Content.BackgroundTransparency = 1

	local Tabs = {}

	function Tabs:MakeTab(TabData)
		local TabBtn = Instance.new("TextButton", TabButtons)
		TabBtn.Size = UDim2.new(0, 100, 1, 0)
		TabBtn.Text = TabData.Name or "Tab"
		TabBtn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
		TabBtn.TextColor3 = Color3.new(1, 1, 1)
		TabBtn.BorderSizePixel = 0
		TabBtn.TextScaled = true

		local TabContent = Instance.new("ScrollingFrame", Content)
		TabContent.Size = UDim2.new(1, 0, 1, 0)
		TabContent.CanvasSize = UDim2.new()
		TabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
		TabContent.ScrollBarThickness = 4
		TabContent.Visible = false
		TabContent.Name = TabData.Name or "Tab"

		local TabLayout = Instance.new("UIListLayout", TabContent)
		TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
		TabLayout.Padding = UDim.new(0, 5)

		TabBtn.MouseButton1Click:Connect(function()
			for _, v in pairs(Content:GetChildren()) do
				if v:IsA("ScrollingFrame") then
					v.Visible = false
				end
			end
			TabContent.Visible = true
		end)

		local Tab = {}

		function Tab:MakeButton(Data)
			local Btn = Instance.new("TextButton", TabContent)
			Btn.Size = UDim2.new(1, -10, 0, 35)
			Btn.Text = Data.Name or "Button"
			Btn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
			Btn.TextColor3 = Color3.new(1, 1, 1)
			Btn.BorderSizePixel = 0
			Btn.TextScaled = true
			Btn.LayoutOrder = Data.Order or 0

			Btn.MouseButton1Click:Connect(function()
				if Data.Callback then
					pcall(Data.Callback)
				end
			end)

			local selfObj = {}
			selfObj.Instance = Btn
			function selfObj:EditContent(NewData)
				if NewData.Name then Btn.Text = NewData.Name end
				if NewData.Callback then
					Btn.MouseButton1Click:Connect(function()
						pcall(NewData.Callback)
					end)
				end
			end
			return selfObj
		end

		function Tab:MakeToggle(Data)
			local Btn = Instance.new("TextButton", TabContent)
			Btn.Size = UDim2.new(1, -10, 0, 35)
			Btn.Text = (Data.State and "[✔] " or "[ ] ") .. (Data.Name or "Toggle")
			Btn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
			Btn.TextColor3 = Color3.new(1, 1, 1)
			Btn.BorderSizePixel = 0
			Btn.TextScaled = true

			local State = Data.State or false

			Btn.MouseButton1Click:Connect(function()
				State = not State
				Btn.Text = (State and "[✔] " or "[ ] ") .. (Data.Name or "Toggle")
				if Data.Callback then
					pcall(Data.Callback, State)
				end
			end)

			local selfObj = {}
			selfObj.Instance = Btn
			function selfObj:EditContent(NewData)
				if NewData.Name then
					Btn.Text = (State and "[✔] " or "[ ] ") .. NewData.Name
				end
				if NewData.Callback then
					Btn.MouseButton1Click:Connect(function()
						State = not State
						Btn.Text = (State and "[✔] " or "[ ] ") .. (NewData.Name or "Toggle")
						pcall(NewData.Callback, State)
					end)
				end
			end
			return selfObj
		end

		function Tab:MakeDropdown(Data)
			local Holder = Instance.new("Frame", TabContent)
			Holder.Size = UDim2.new(1, -10, 0, 35)
			Holder.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
			Holder.BorderSizePixel = 0

			local Label = Instance.new("TextButton", Holder)
			Label.Size = UDim2.new(1, 0, 0, 35)
			Label.BackgroundTransparency = 1
			Label.TextColor3 = Color3.new(1, 1, 1)
			Label.TextScaled = true
			Label.Text = Data.Name or "Dropdown"

			local List = Instance.new("Frame", Holder)
			List.BackgroundTransparency = 1
			List.Position = UDim2.new(0, 0, 0, 35)
			List.Size = UDim2.new(1, 0, 0, 0)
			List.ClipsDescendants = true

			local ListLayout = Instance.new("UIListLayout", List)
			ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
			ListLayout.Padding = UDim.new(0, 2)

			local Open = false

			local function Rebuild()
				for _, v in ipairs(List:GetChildren()) do
					if v:IsA("TextButton") then v:Destroy() end
				end
				for _, Option in ipairs(Data.Options or {}) do
					local Btn = Instance.new("TextButton", List)
					Btn.Size = UDim2.new(1, 0, 0, 30)
					Btn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
					Btn.BorderSizePixel = 0
					Btn.TextColor3 = Color3.new(1, 1, 1)
					Btn.TextScaled = true
					Btn.Text = tostring(Option)

					Btn.MouseButton1Click:Connect(function()
						if Data.Callback then
							pcall(Data.Callback, Option)
						end
						Open = false
						TS:Create(List, TweenInfo.new(0.25), {Size = UDim2.new(1, 0, 0, 0)}):Play()
						TS:Create(Holder, TweenInfo.new(0.25), {Size = UDim2.new(1, -10, 0, 35)}):Play()
					end)
				end
			end

			Rebuild()

			Label.MouseButton1Click:Connect(function()
				Open = not Open
				if Open then
					local TargetSize = #List:GetChildren() * 32
					TS:Create(List, TweenInfo.new(0.25), {Size = UDim2.new(1, 0, 0, TargetSize)}):Play()
					TS:Create(Holder, TweenInfo.new(0.25), {Size = UDim2.new(1, -10, 0, 35 + TargetSize)}):Play()
				else
					TS:Create(List, TweenInfo.new(0.25), {Size = UDim2.new(1, 0, 0, 0)}):Play()
					TS:Create(Holder, TweenInfo.new(0.25), {Size = UDim2.new(1, -10, 0, 35)}):Play()
				end
			end)

			local selfObj = {}
			selfObj.Instance = Holder
			function selfObj:EditContent(NewData)
				if NewData.Name then Label.Text = NewData.Name end
				if NewData.Options then
					Data.Options = NewData.Options
					Rebuild()
				end
				if NewData.Callback then
					Data.Callback = NewData.Callback
				end
			end
			return selfObj
		end

		return Tab
	end

	return Tabs
end

return Library
